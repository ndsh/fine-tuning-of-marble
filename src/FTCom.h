/*

    ./~     FTCom.h
    ./~     Copyright (c) 2016 The Fine Tuning of Marble
    
    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
    ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ 

*/

/*  
    ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ 

        per class definition in the MIDI Library by Paul Stoffregen we got access
        to the following methods:

        MIDI.sendNoteOn(note, velocity, channel);
        MIDI.sendNoteOff(note, velocity, channel);
        MIDI.sendProgramChange(note, velocity, channel);
        MIDI.sendControlChange(note, velocity, channel);
        MIDI.sendPitchBend(note, velocity, channel);
        MIDI.sendPolyPressure(note, velocity, channel);
        MIDI.sendAfterTouch(note, velocity, channel); 

        we will use some of these methods in a different manner:

        ~ ControlChange --> only for pulse!
        ~ NoteOn        --> various other things (stop/wait)

            | FLAG | MODE      | DATA                 | DIRECTION    |
            |------|-----------|----------------------|--------------|
            | 0    | PING      | ownChannel           | [OMNI|+1|-1] |
            | 1    | ECHO      | repeatData           | [OMNI|+1|-1] |
            | 2    | ESTABLISH | previousChannel+1    | +1           |

    ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
*/

#ifndef FTCom_h
#define FTCom_h

#include <Arduino.h>
#include "MIDI.h"

//Definitions
#define DEBUG_COM true

class FTCom
{
  public:
    FTCom(uint8_t onboardLedPin);
    void update();

    void turnOnLED();//Communicational Light
    void turnOffLED();//Communicational Light

    void startSequence();//LED starting sequence to show Com is available

    void write(byte flag, byte data, byte channel); //Write to a specific channel
    void write(byte flag, byte data); //Do an OmniWrite to all channels
    byte read(byte flag);
    bool pulseIn();//Read in pulse from network
    void pulseOut(bool pulse); //Send out the pulse generated by the Clock
    bool hasStarted(); //For communicating the beginning of the play
    uint16_t getPulseCount(); //Returns mPulseCount, a counter of received pulses


  private:
    uint16_t mPulseCount; //Holds the last received pulse number (sent by the PodZero)
    uint8_t mOnboardLedPin;
    bool mStart; //Holds true in case the first value has been received (thus, starting the play)

    void pulse(); //Call this everytime a pulse is received
};

#endif
